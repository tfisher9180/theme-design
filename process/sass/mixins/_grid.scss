@mixin make-container() {
	width: 100%;
	padding-right: $grid-gutter-width / 2;
	padding-left: $grid-gutter-width / 2;
	margin-right: auto;
	margin-left: auto;
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include create-media-query(min-width, $breakpoint) {
			max-width: $container-max-width;
		}
	}
}

@mixin make-row() {
	display: flex;
	flex-wrap: wrap;
	margin-right: $grid-gutter-width / -2;
	margin-left: $grid-gutter-width / -2;
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
	%grid-column {
		position: relative;
		width: 100%;
		min-height: 1px;
		padding-right: $gutter / 2;
		padding-left: $gutter / 2;
	}

	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-infix($breakpoint, $breakpoints);

		@for $i from 1 through $columns {
			.col#{$infix}-#{$i} {
				@extend %grid-column;
			}
		}

		.col#{$infix},
		.col#{$infix}-auto {
			@extend %grid-column;
		}

		@include respond-to($breakpoint) {
			.col#{$infix} {
				flex: 1;
				max-width: 100%;
			}

			.col#{$infix}-auto {
				flex: 0 0 auto;
				width: auto;
				max-width: none;
			}

			@for $i from 1 through $columns {
				.col#{$infix}-#{$i} {
					flex: 0 0 percentage($i / $columns);
					max-width: percentage($i / $columns);
				}
			}
		}
	}
}